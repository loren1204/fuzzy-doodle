
here's everything i have so far adding detailed comments now 
//constructor 
#include "LoanData.h"
#include <iostream>
#include <cmath>
#include <iomanip>

//printAmortizationSchedule
void LoanData::printAmortizationSchedule()
{
    double beginningBalance = Bal;  
    double payment;
    double interestPaid;
    double principalPaid;
    double endingBalance;
    int month = 1;

    // Print header
    std::cout << std::left
              << std::setw(10) << "Month"
              << std::setw(20) << "Beginning Balance"
              << std::setw(10) << "Payment"
              << std::setw(15) << "Interest Paid"
              << std::setw(15) << "Principal Paid"
              << std::setw(20) << "Ending Balance" << "\n";

    while (beginningBalance > 0)
    {
        
        if ((i + 1) * Bal > A)
        {
            payment = A;
        }
        else
        {
            payment = (i + 1) * Bal;
        }

        interestPaid = i * Bal;
        principalPaid = A - interestPaid;
        endingBalance = (i + 1) * Bal - A;

        /
        std::cout << std::setw(15) << month++
                  << std::setw(15) << std::fixed << std::setprecision(2) << beginningBalance
                  << std::setw(15) << payment
                  << std::setw(15) << interestPaid
                  << std::setw(15) << principalPaid
                  << std::setw(15) << endingBalance << "\n";

       
        beginningBalance = endingBalance;
        Bal = beginningBalance;  // Set Bal to the new beginning balance

        
}


LoanData::LoanData(double p, double n, double i)
{
    i = i/ 100.0;

    i = i / 12.0;

    n = n * 12; 


    A = p * (i * pow(1 + i, n)) / (pow(1 + i, n) - 1);

    Bal = p;

}

//MakePayment member function
void LoanData::MakePayment(double pay);
{
    Bal = (i + 1) * Bal - pay;
}

//loandata.h 

#ifndef LOANDATA_H
#define LOANDATA_H

class LoanData
{
private:
    double Bal;
    double n;
    double i;
    double A;

public:
    LoanData (double p, double n, double i);
    void    MakePayment(double a); 
    void    PrintAmortizationSchedule(); 
    void    PrintPayoffTimeReport();

    
};

#endif 
//PRINTPAYOFFTIMEREPORT
void LoanData::printPayOffTimeReport(double p, double i)
{
    double A;  // Monthly payment
   

   
    std::cout << std::setw(10) << "Months" 
              << std::setw(15) << "Monthly Payment" 

    
    for (int n = 6; n <= 360; n++)
    {
       
        A = p * (i * pow(1 + i, n)) / (pow(1 + i, n) - 1);

        
        std::cout << std::setw(10) << n << std::setw(15) << std::fixed << std::setprecision(2) << A << "\n";
    }
}
